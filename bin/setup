#!/usr/bin/env bash
if command -v realpath >/dev/null 2>&1; then
    SCRIPTS="$(dirname $(realpath "${BASH_SOURCE[0]}" 2>/dev/null))"
elif command -v readlink >/dev/null 2>&1 \
    && readlink --canonicalize-existing ~ >/dev/null 2>&1; then
    SCRIPTS="$(dirname $(readlink --canonicalize-existing "${BASH_SOURCE[0]}"))"
elif command -v readlink >/dev/null 2>&1; then
    SCRIPTS="$(dirname $(readlink "${BASH_SOURCE[0]}") 2>/dev/null)"
fi

if [ "${SCRIPTS}" == "" ] || [ "${SCRIPTS}" == "${HOME}" ]; then
    SCRIPTS=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd -P)
    if [ "${SCRIPTS}" == "${HOME}" ]; then echo "Where am I"; fi
fi
pathadd() { [[ ":${PATH}:" != *":$1:"* ]] && export PATH="${PATH:+"${PATH}:"}$1"; }
pathaddfirst() { [[ ":${PATH}:" != *":$1:"* ]] && export PATH="$1${PATH:+":${PATH}"}"; }
pathadd "${SCRIPTS}"
DOT="$(cd "${SCRIPTS}"/.. || exit; pwd -P)"
DOT_DEST=~/local/dot
LOCALDOT=~/.local-dot

error() {
    RED='\033[0;31m'
    NC='\033[0m' # No Color
    echo -e "${RED}"${@}"${NC}"
}

run-quiet() {
    title="$1"
    shift
    echo -n "${title}"...
    err=$( { $@ >/dev/null; } 2>&1) && echo ok || error error
    [ -n "${err}" ] && error "${err}"
}

me() {
    mkdir -p ~/.tmp

    setup-install
    setup-dot
    build cron install ~/.cron
    build system is-mac && setup-osx
}

go() {
    [ "$1" == "--no" ] && local no="--no" || local no=""

    mkdir -p ${LOCALDOT}/{status,conf,commands}
    mkdir -p ~/.tmp

    [ -n "${no}" ] || setup-me

    setup-dirs-simple
    hash -r; pathaddfirst "${SCRIPTS}"

    setup-install ${no}

    setup-dot
    build cron install ~/.cron

    build system is-mac && setup-osx

    if [ "${no}" == "" ]; then
        setup-git
    else
        echo "run setup git"
    fi
}

setup-osx() {
    build mac dud mail
    bash "${DOT}"/conf/osx;
}

setup-me() {
    read -p "make home?[Y/n]" q
    if [ "${q}" == "" ]; then touch ${LOCALDOT}/status/home.me;
    else rm -f ${LOCALDOT}/status/home.me; fi
}

setup-dot() {
    # build symc clean ~/
    build symc link-dir "${DOT}"/conf ~/.
    . ~/.bashrc
}

setup-dirs-simple() {
    mkdir -p "${DOT_DEST}"
    if [ "${DOT_DEST}" != "${DOT}" ]; then
        build symc safe-cp "${DOT}" "${DOT_DEST}"
        DOT="${DOT_DEST}"
        SCRIPTS="${DOT}/bin"
    fi
}

setup-install() {
    build install restore ${DOT}/install
    echo "The following extras must be installed on their own"
    echo 'peppermint'
    if [ "$1" != "--no" ] && [ "$1" != "no" ]; then
        read -p "Run Setups? [yes] " r
        if [ "${r}" == "" ]; then
            open ${DOT}/conf/taylormint.terminal
        fi
    fi
}

git-prompt() {
    field="$1"
    default="$2"
    default_prompt=""
    [ "${default}" != "" ] && default_prompt=" [${default}]"
    read -p "${field}${default_prompt}: " value
    if [ "${value}" == "" ]; then value="${default}"; fi
    if [ "${value}" == "" ]; then return; fi
    config="${LOCALDOT}/conf/config.git"
    git config --file="${config}" "${field}" "${value}"
}

setup-git() {
    git-prompt user.email git@taylorlmoney.com
    git-prompt github.user
    git-prompt github.token
}


a="$1"
shift;
if [ "${a}" == "git" ]; then
    setup-git "$@"
elif [ "${a}" == "dot" ]; then
    setup-dot "$@"
elif [ "${a}" == "osx" ]; then
    setup-osx "$@"
elif [ "${a}" == "go" ]; then
    go "$@"
elif [ "${a}" == "all" ]; then
    go "$@"
elif [ "${a}" == "no" ]; then
    go --no "$@"
elif [ "${a}" == "me" ]; then
    me "$@"
elif [ "${a}" == "install" ]; then
    setup-install "$@"
else
    echo "git: run git setup"
    echo "dot: symlink dotfiles"
    echo "go/all: run everything"
    echo "no: run everything, ask no questions"
    echo "me: setup"
    echo "install: install (accepts no)"
fi
