#!/usr/bin/env bash
if command -v realpath >/dev/null 2>&1; then
    SCRIPTS="$(dirname $(realpath "${BASH_SOURCE[0]}" 2>/dev/null))"
elif command -v readlink >/dev/null 2>&1 \
    && readlink --canonicalize-existing ~ >/dev/null 2>&1; then
    SCRIPTS="$(dirname $(readlink --canonicalize-existing ${BASH_SOURCE[0]}))"
else
    SCRIPTS=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd -P)
    if [ "$SCRIPTS" == "${HOME}" ]; then echo "Where am I"; exit 1; fi
fi
pathadd() { [[ ":$PATH:" != *":$1:"* ]] && export PATH="${PATH:+"$PATH:"}$1"; }
pathaddfirst() { [[ ":$PATH:" != *":$1:"* ]] && export PATH="$1${PATH:+":$PATH"}"; }
pathadd "$SCRIPTS"
DOT="$(cd $SCRIPTS/..; pwd -P)"
DOT_DEST=~/local/dot
LOCALDOT=~/.local-dot

error() {
    RED='\033[0;31m'
    NC='\033[0m' # No Color
    echo -e ${RED}${@}${NC}
}

run-quiet() {
    title="$1"
    shift
    echo -n $title...
    err=$( { $@ >/dev/null; } 2>&1) && echo ok || error error
    [ "$err" ] && error "$err"
}

go() {
    [ "$1" == "--no" ] && local no="--no" || local no=""

    mkdir -p $LOCALDOT/{status,conf,commands,account}
    mkdir -p ~/.mail ~/.calendar ~/.contacts
    mkdir -p ~/.tmp

    [ "$no" ] || setup-me

    [ -d $DOT/../archives ] && setup-dirs || setup-dirs-simple
    hash -r; pathaddfirst $SCRIPTS

    setup-install $no

    setup-dot
    build cron install ~/.cron
    [ -d ~/local/archives ] && [ "$no" == "" ] && setup-decrypt

    build system is-mac && setup-osx

    if [ "$no" == "" ]; then
        setup-git
        setup-account
    else
        echo "run setup git"
        echo "run setup account"
    fi
}

setup-osx() {
    build mac dud mail
    bash $DOT/conf/osx;
}

setup-me() {
    read -p "make home?[Y/n]" q
    if [ "$q" == "" ]; then touch $LOCALDOT/status/home.me;
    else rm -f $LOCALDOT/status/home.me; fi
    read -p "allow backups?[Y/n]" q
    if [ "$q" == "" ]; then touch $LOCALDOT/status/backup.me;
    else rm -f $LOCALDOT/status/backup.me; fi
    read -p "allow sync?[Y/n]" q
    if [ "$q" == "" ]; then touch $LOCALDOT/status/sync.me;
    else rm -f $LOCALDOT/status/sync.me; fi
}

setup-decrypt() {
    #tail-c+
    # gpg --import
    echo "decrypting"
    cd ~/
    build symc safe-rm ~/.local-dot
    build symc safe-rm ~/.password-store

    build archive restore ~/local/archive/word
    build archive restore ~/local/archive/local
}

setup-dot() {
    build symc clean ~/
    build symc link-dir $DOT/conf ~/.
    . ~/.bashrc
    build mail link-mailcap
}

setup-dirs() {
    if [ "$DOT_DEST" != "$DOT" ]; then
        # TODO rename to lowercase
        # TODO make cp actually happen
        build symc cp-dir "$DOT/../../" ~/
        DOT="$DOT_DEST"
        SCRIPTS="$DOT/bin"
    fi
}

setup-dirs-simple() {
    mkdir -p "$DOT_DEST"
    if [ "$DOT_DEST" != "$DOT" ]; then
        build symc safe-cp "$DOT" "$DOT_DEST"
        DOT="$DOT_DEST"
        SCRIPTS="$DOT/bin"
    fi
}

setup-install() {
    build install restore $DOT/install
    command -v mu >/dev/null 2>&1 && run-quiet "Indexing with mu" mu index -m ~/.mail
    echo "The following extras must be installed on their own"
    echo 'gdrsync (setup); peppermint'
    if [ "$1" != "--no" ]; then
        read -p "Run Setups? [yes] " r
        if [ "$r" == "" ]; then
            gdrsync.py ~/desktop test -n
            open $DOT/conf/taylormint.terminal
        fi
    fi
}

setup-account() {
    read -p "Add Account? " q
    while [ "$q" == "" ]; do
        $DOT/templates/account.template
        read -p "Add Account? " q
    done
}

setup-git() {
    default_email=git@taylorlmoney.com
    read -p "git email[$default_email]: " email
    if [ "$email" == "" ]; then email="$default_email"; fi
    build template fill --email "$email" $DOT/templates/git.bash.template > $LOCALDOT/conf/git.bash
    . $LOCALDOT/conf/git.bash
}


a="$1"
shift;
if [ "$a" == "git" ]; then
    setup-git "$@"
elif [ "$a" == "account" ]; then
    setup-account "$@"
elif [ "$a" == "dot" ]; then
    setup-dot "$@"
elif [ "$a" == "decrypt" ]; then
    setup-decrypt "$@"
elif [ "$a" == "osx" ]; then
    setup-osx "$@"
elif [ "$a" == "go" ]; then
    go "$@"
elif [ "$a" == "all" ]; then
    go "$@"
elif [ "$a" == "no" ]; then
    go --no "$@"
else
    echo "git: run git setup"
    echo "account: run account setup"
    echo "dot: symlink dotfiles"
    echo "go/all: run everything"
    echo "no: run everything, ask no questions"
fi
