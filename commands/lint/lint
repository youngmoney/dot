#!/usr/bin/env python3

from argparse import ArgumentParser
import os, subprocess
import settings as settings_lib


def parse():
    parser = ArgumentParser(description="Lint and Fix code in all files!")
    subparsers = parser.add_subparsers(title="commands", dest="command")
    lint_parser = subparsers.add_parser("lint")
    lint_parser.add_argument("filenames", nargs="+")

    fix_parser = subparsers.add_parser("fix")
    fix_parser.add_argument("filenames", help="filenames", nargs="+")
    return parser.parse_args()


def run():
    args = parse()
    settings = settings_lib.get()
    if args.command == "lint":
        return lint(args.filenames, settings)
    elif args.command == "fix":
        return fix(args.filenames, settings)
    print("unknown command")
    return 1


def run_command(command, stderr=False, **kwargs):
    errpipe = subprocess.PIPE if stderr else subprocess.STDOUT
    if "cwd" in kwargs and len(kwargs["cwd"]) == 0:
        del kwargs["cwd"]
    return subprocess.run(
        command, stdout=subprocess.PIPE, stderr=errpipe, shell=True, text=True, **kwargs
    )


def print_result(resultcode, filename, output):
    if resultcode == 0:
        return
    print()
    print(filename)
    print(output)
    print()


def lint(filenames, settings):
    fail = 0
    for filename in filenames:
        linter = settings.get_linter(filename)
        if linter:
            command = linter.get_command(os.path.basename(filename))
            result = run_command(command, cwd=os.path.dirname(filename))
            print_result(result.returncode, filename, result.stdout)
            fail |= min(1, result.returncode)
        else:
            print("Ignoring: ", filename)
    return fail


def fix(filenames, settings):
    fail = 0
    for filename in filenames:
        fixer = settings.get_fixer(filename)
        if fixer:
            command = fixer.get_command(os.path.basename(filename))
            result = run_command(command, cwd=os.path.dirname(filename))
            print_result(result.returncode, filename, result.stdout)
            fail |= min(1, result.returncode)
        else:
            print("Ignoring: ", filename)
    return fail


if __name__ == "__main__":
    exit(run())
