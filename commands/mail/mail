#!/usr/bin/env bash

scriptdir=$(cd $(dirname $([ -L $0 ] && readlink $0 || echo $0)) && pwd)


if [ "$MAILDIR" == "" ]; then MAILDIR=~/.mail; fi

mail::mail_count() {
    local s='new/'
    if [ "$1" == "-cur" ]; then s='cur/'; fi
    find $MAILDIR -path '*/INBOX/'"$s"'*' | wc -l | sed -e 's/^[ \t]*//g'
}

mail::unread_mail() {
   local TIME=1
   if [ "$1" != "" ]; then TIME=$1; shift; fi
   find $MAILDIR -mmin -$TIME -path '*/INBOX/new/*' | xargs sort -r | awk '/^From|^Subject/ { print }' | awk '!(NR%2){print$0p}{p=$0}' | sed -e 's/Subject//g' -e 's/From: //g' -e 's/ : /: /g'
}

mail::mail_attachment() {
    if build system is-mac; then
        "$scriptdir/view_attachment" $@
    else
        xdg-open "$1"
    fi
}

mail::mail_with_subject() {
   local SEARCH="$@"
   find $MAILDIR  -path '*/INBOX/*/*' -print0 | xargs -0 grep -H "$SEARCH"

}

mail::mail_link() {
    rm -f ~/.mailcap
    ln -s $scriptdir/mailcap ~/.mailcap
}

mail::gmail-auth() {
    $scriptdir/oauth2.py "$@"
}

mail::send-auth() {
    $scriptdir/send.py "$@"
}

arg=$1
shift
if [ "$arg" == "count" ]; then
    mail::mail_count $@
elif [ "$arg" == "unread" ]; then
    mail::unread_mail $@
elif [ "$arg" == "open-attachment" ]; then
    mail::mail_attachment "$@"
elif [ "$arg" == "link-mailcap" ]; then
    mail::mail_link $@
elif [ "$arg" == "with-subject" ]; then
    mail::mail_with_subject "$@"
elif [ "$arg" == "gmail-auth" ]; then
    mail::gmail-auth "$@"
elif [ "$arg" == "send-auth" ]; then
    mail::send-auth "$@"
else
    echo "count: count of mail in \$MAILDIR or ~/.mail maildir INBOX directories"
    echo "unread: print FROM:SUBJECT for new messages (same as count)"
    echo "open-attachment: decode type and open appropriately"
    echo "with-subject: grep all mails subject lines"
    echo "link-mailcap: link the mailcap file to ~/.mailcap"
    echo "gmail-auth: run the gmail oauth setup script"
    echo "send-auth: send email using send.py for oauth"
fi
