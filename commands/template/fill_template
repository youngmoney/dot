#!/usr/bin/env python3

from collections import OrderedDict


def parse_template(i, arg_dict):
    seen_blank = 0
    body = ""
    for line in i.split("\n"):
        if seen_blank == 0 and len(line) > 0 and line[0] == "#":
            pass
        elif seen_blank == 0:
            if line == "":
                seen_blank = 1
            else:
                splitted = line.split(": ", 1)
                if len(splitted) == 1:
                    arg_dict[splitted[0]] = ""
                elif len(splitted) == 2:
                    arg_dict[splitted[0]] = splitted[1]
        else:
            body += line
            body += "\n"

    return body[0:-2]


def ask_for_vars(arg_dict):
    """accepts a dictionary that maps variables to descriptions,
    returns a dictionary with the same keys, but user filled values"""
    val_dict = OrderedDict()
    old_in = sys.stdin
    old_out = sys.stdout
    sys.stdin = open("/dev/tty")
    sys.stdout = open("/dev/tty")
    try:
        for v in arg_dict:
            try:
                val = input("[" + v + "] " + arg_dict[v] + ": ")
            except KeyboardInterrupt:
                sys.stdin = old_in
                sys.stdout = old_out
                return None
            val_dict[v] = val
    except EOFError:
        sys.stdin = old_in
        sys.stdout = old_out
        return None
    sys.stdin = old_in
    sys.stdout = old_out
    return val_dict


def replace_vars(s, values):
    for v in values:
        s = s.replace("$" + v + "$", values[v])
    return s


def parse_args(in_args, flags, args, strings):
    arg_name = None
    for part in in_args:
        if not arg_name is None:
            args[arg_name] = part
            arg_name = None
        elif len(part) > 2 and part[0:2] == "--":
            arg_name = part[2:]
        elif len(part) > 1 and part[0] == "-":
            flags += [part[1:]]
        else:
            strings += [part]


if __name__ == "__main__":
    import sys

    s = None
    predefined = {}
    fl = []
    ins = []
    parse_args(sys.argv[1:], fl, predefined, ins)
    if len(ins) > 0:
        try:
            with open(ins[0]) as f:
                s = f.read()
        except Exception as e:
            print((ins[0] + " not found"))

    elif not sys.stdin.isatty():
        s = sys.stdin.read()
    else:
        sys.stderr.write("[file] [-v] [--var value]*\n")
        exit(1)

    v = OrderedDict()
    s = parse_template(s, v)
    nv = OrderedDict()
    for var in v:
        if not var in predefined:
            nv[var] = v[var]
    v = ask_for_vars(nv)
    if v is None:
        print("")
        exit(1)
    for pre in predefined:
        v[pre] = predefined[pre]
    s = replace_vars(s, v)
    if "v" in fl:
        vs = []
        for i in v:
            vs.append('"--%s" "%s"' % (i, v[i]))
        print((" ".join(vs)))
    print(s)
