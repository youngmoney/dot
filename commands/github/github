#!/usr/bin/env python3

from subprocess import Popen, PIPE
import subprocess
import json, base64
import urllib.request, urllib.error, urllib.parse, argparse
import sys, os, tempfile
from github import GitHub


def confirm(prompt):
    while True:
        try:
            i = input(prompt+" ")
        except KeyboardInterrupt:
            return False
        if i.lower() in ('yes','y', ''): return True
        elif i.lower() in ('no','n'): return False

def prompt(prompt):
    try:
        return input(prompt+" ")
    except KeyboardInterrupt:
        return ""

def getRepoName(repo, gh=None):
    if not repo and gh is not None:
        potential = gh.get_project()
        if potential is not None:
            repo = potential
    if not repo:
        repo = os.path.basename(os.getcwd())
        if not confirm("Use repo named "+repo+"?"):
            repo = prompt("Use repo named:")
    if not "/" in repo:
        repo = gh.username + "/" + repo
    return repo

def getMessage(initial_message=""):
    EDITOR = os.environ.get('EDITOR', 'vim')
    message = ""
    tmp_name=""
    with tempfile.NamedTemporaryFile(suffix=".tmp", delete=False) as tmp:
        tmp.write(initial_message)
        tmp.flush()
        tmp_name=tmp.name
    subprocess.call([EDITOR, tmp.name])
    with open(tmp_name) as tmp:
        tmp.seek(0)
        message = tmp.read()
    os.unlink(tmp_name)

    message_lines = [l for l in message.split('\n') if not l.startswith('#')]
    first_line = -1
    for i in reversed(list(range(len(message_lines)))):
        if message_lines[i].strip() != "":
            first_line = i
            break
    message_lines = message_lines[:first_line+1]
    if len(message_lines) < 3:
        return None, None
    title = message_lines[0]
    body = ''
    for l in message_lines[2:]:
        if body == '':
            body = l
        else:
            body += '\n'+l
    return title, body

def repoCommand(args, gh):
    verb = args.verb[0]
    if verb == "list":
        repos = gh.repo_list()
        if not repos:
            return False
        for repo in repos:
            if repo["private"]:
                print(repo["full_name"] + " (private)")
            else :
                print(repo["full_name"])
        return True

    elif verb in ["create", "edit", "delete", "open"]:
        repo = getRepoName(args.repo, gh)
        if not repo:
            print("No repo given")
            return True

        if verb == "open":
            url = "https://github.com/"+repo
            print(url)
            subprocess.call(["open", url])
            return True


        if verb == "delete":
            if confirm("Delete repo "+repo+"?"):
                return gh.repo_delete(repo)
            return True

        private = None
        if args.public:
            private = False
        if args.private:
            private = True

        description = None
        if args.description:
            description = "".join(args.description)


        if verb == "create":
            if private == None:
                private = False
            print("Creating GitHub repository " + repo + " ...")
            org, repo = repo.split("/")
            org_name = org
            if org == gh.username:
                org = None
            if gh.repo_create(repo, private=private, description=description, org=org):
                if confirm("Add github as remote gh?"):
                    subprocess.call(["git", "remote", "add", "gh", "git@github.com:"+org_name+"/"+repo+".git"])
                    if confirm("Push master to github?"):
                        subprocess.call(["git", "push", "gh", "master"])
                return True
            return False

        if verb == "edit":
            print("Updating GitHub repository " + repo + " ...")
            return gh.repo_edit(repo, private=private, description=description)

    return True

def collabCommand(args, gh):
    verb = args.verb[0]
    repo = getRepoName(args.repo, gh)
    if not repo:
        print("No repo given")
        return True

    if verb == "list":
        collabs = gh.repo_collab_list(repo)
        if not collabs:
            return False
        for collab in collabs:
            if collab["login"].lower() == gh.username.lower():
                print(collab["login"] + " (me)")
            else:
                print(collab["login"])
        return True

    if verb in ['add', 'remove']:
        collab = args.collab
        if not collab:
            collab = prompt("Who is this collaborator?")
            if not collab:
                print("No collab given")
                return True
        return gh.repo_collab(repo, collab, verb == 'remove')

def keyCommand(args, gh):
    verb = args.verb[0]
    if verb == "list":
        keys = gh.key_list()
        if not keys:
            return False
        for key in keys:
            print(key["title"] + "\t" + key["key"])
        return True

    if verb in ['add', 'remove']:

        title = args.name
        if not title:
            title = prompt("Key name:")
            if not title:
                print("No name given")
                return True

        if verb == 'add':
            key = args.key
            if type(key) == list:
                key = " ".join(key)
            if not key:
                key = prompt("SSH Key:")
                if not key:
                    print("No key given")
                    return True
            return gh.key_create(title, key)

        if verb == 'remove':
            keys = gh.key_list()
            if not keys:
                return False
            for key in keys:
                if key["title"].lower() == title.lower():
                    return gh.key_delete(str(key["id"]))

            return False


def forkCommand(args, gh):
    project = getRepoName(None, gh)
    if project is None:
        print("no project")
        return False
    fork = gh.fork(project)
    if fork and confirm("Add fork as remote fork?"):
        org = gh.username
        repo = project.split("/")[1]
        subprocess.call(["git", "remote", "add", "fork", "git@github.com:"+org+"/"+repo+".git"])
    return fork

def pullCommand(args, gh):
    project = getRepoName(None, gh)
    if project is None:
        print("no project")
        return False
    verb = args.verb[0]
    if verb == "list":
        pulls = gh.pulls_list(project)
        if pulls is None:
            return False
        for pull in pulls:
            p = '{:<4} {} ({})'.format(pull["number"], pull["title"].encode('utf-8'), pull["user"]["login"].encode('utf-8'))
            print(p)

    if verb == "request":
        return pull_request(gh, project, args.base, args.head)

    if verb in ["checkout", "diff", "patch"]:
        if not args.request:
            print("no request specified")
            return False

        pull = gh.pulls_get(project, args.request)
        if not pull:
            return False

        if verb == "diff" or verb == "patch":
            diffpatch = pull[verb+"_url"]
            response = urllib.request.urlopen(diffpatch)
            diffpatch = response.read()
            print(diffpatch)
        elif verb == "checkout":
            sha = pull["head"]["sha"]
            repo = pull["head"]["repo"]["name"]
            user = pull["head"]["repo"]["owner"]["login"]
            branch = pull["head"]["ref"]
            repo = "git@github.com:%s/%s.git" % (user, repo)

            subprocess.call(["git", "remote", "add", "--no-tags", user, repo], stderr=PIPE)
            subprocess.call(["git", "remote", "set-branches", "--add", user, branch])
            err = subprocess.call(["git", "fetch", user])
            if err:
                return False
            err = subprocess.call(["git", "checkout", user+"/"+branch], stdout=PIPE, stderr=PIPE)
            if err:
                err = subprocess.call(["git", "checkout", branch], stdout=PIPE, stderr=PIPE)
                if err:
                    return False
            subprocess.call(["git", "checkout", "-b", user+"-"+branch])

    if verb == "info":
        if not args.request:
            print("no pull given")
            return False
        issue = issue_info(gh, project, args.request, True)
        if not issue:
            return False
        print(issue)

    if verb == "comment":
        if not args.request:
            print("no issue given")
            return False

        comment = issue_comment(gh, project, args.request, True)
        if not comment:
            return False

    return True

def issueCommand(args, gh):
    project = getRepoName(None, gh)
    if project is None:
        print("no project")
        return False
    verb = args.verb[0]
    if verb == "create":
        title, body = getMessage("""


# write the issue up like a commit
# comments and blank lines at the end are ignored
""")
        if title is None or body is None:
            print("incomplete issue")
            return False

        issue = gh.issue_create(project, title, body)
        if issue:
            print((issue["number"]))
        return issue
    if verb == "list":
        issues = gh.issues_list(project)
        if issues is None:
            return False
        for issue in issues:
            pr = "PR - " if "pull_request" in issue else ""
            if pr: continue
            i = '{:<4} {}{} ({})'.format(issue["number"], pr, issue["title"].encode('utf-8'), issue["user"]["login"].encode('utf-8'))
            print(i)

    if verb == "info":
        if not args.issue:
            print("no issue given")
            return False

        issue = issue_info(gh, project, args.issue)
        if not issue:
            return False
        print(issue)

    if verb == "comment":
        if not args.issue:
            print("no issue given")
            return False

        comment = issue_comment(gh, project, args.issue)
        if not comment:
            return False

    return True

def issue_comment(gh, project, issue, pull=False):
    info = issue_info(gh, project, issue, pull)
    if not info:
        return False
    initial_message = ["# "+l for l in info.splitlines()]
    initial_message.insert(0, "Comment - line ignored")
    initial_message.insert(1, "")
    initial_message.insert(1, "")
    initial_message.append("# Comment below (leave blank line)")
    title, body = getMessage('\n'.join(initial_message))
    if not body:
        print("no comment")
        return False

    comment = gh.issue_comment(project, issue, body)
    return comment


def issue_info(gh, project, issue, pull=False):
        issue = str(issue)
        def get_white(s):
            return ' '*(len(s) - len(s.lstrip()))
        if pull:
            info = gh.pull_info(project, issue)
        else:
            info = gh.issue_info(project, issue)
        if info is None:
            return False
        if not info:
            print(("are you sure this is an {}?".format("pull" if pull else "issue")))
            return False
        width = 100
        under = ('{:^'+str(width)+'}').format('-'*width)
        fill = ('\n{:^'+str(width)+'}\n').format('-'*(width-10))
        import textwrap
        comments = gh.issue_comments(project, issue)
        events = gh.issue_events(project, issue)
        comments += events
        comments = sorted(comments, key=lambda x: x["created_at"])
        lines = []
        title = '{} {}'.format(info["number"], info["title"].encode('utf-8'))
        lines.extend(title.splitlines())
        lines.append(under)
        lines.append("")
        try:
            body = info["body"].encode('utf-8')
        except:
            body = ""
        body = '{}\n\n - {}'.format(body, info["user"]["login"].encode('utf-8'))
        lines.extend(body.splitlines())
        for comment in comments:
            if "body" in comment:
                lines.append(fill)
                i = '{}\n\n - {}'.format(comment["body"].encode('utf-8'), comment["user"]["login"].encode('utf-8'))
            elif "event" in comment:
                event = comment["event"].encode('utf-8')
                if event in ["subscribed", "mentioned"]:
                    continue
                lines.append(fill)
                detail = ""
                if "labeled" in event: detail = comment["label"]["name"]
                if "milestone" in event: detail = comment["milstone"]["title"]
                if "assign" in event: detail = comment["assignee"]["login"]
                if "reference" in event: detail = "{:.16}".format(comment["commit_id"])
                if detail: detail = ": {}".format(detail)
                i = '{}{} - {}'.format(event, detail, comment["actor"]["login"].encode('utf-8'))
            lines.extend(i.splitlines())

        lines.append("")
        lines.append(under)

        if pull:
            mergable = "mergeable" if info["mergeable"] else "unmergeable"
            if info["merged"]: mergable = "merged"
            locked = " - locked" if info["locked"] else ""
            ref = info["head"]["sha"]
            ref_repo = info["base"]["repo"]["full_name"]
            status = gh.ref_status(ref_repo, ref)
            statuses = {}
            for s in status["statuses"]:
                if s["context"] not in statuses:
                    statuses[s["context"]] = s["description"]
            statuses = (["{}: {}".format(s, statuses[s]) for s in statuses])
            state = {"success":" - passing", "pending":" - pending", "failure":" - failing"}[status["state"]]
            if not statuses: state = ""
            status = '{}{} - {}{}'.format(info["state"], state, mergable, locked)
            lines.append(status)
            lines.extend(statuses)
        else:
            locked = " - locked" if info["locked"] else ""
            labels = []
            state = info["state"]
            for l in info["labels"]:
                labels.append("#"+l["name"])
            labels = "("+" ".join(labels)+")" if labels else ""
            pr = "PR - " if "pull_request" in info else ""
            lines.append("{}{} {}".format(pr, state, locked, labels))

        return '\n'.join([textwrap.fill(l, width, subsequent_indent=get_white(l)) for l in lines])

def pull_request(gh, project, base, head):
    if base is None:
        base = "master"
    if head is None:
        (head, stderr) = Popen(["git", "rev-parse", "--abbrev-ref", "HEAD"],
                               stdout=PIPE, stderr=PIPE).communicate()
        head=head.strip()
        if stderr or head == "HEAD":
            (head, stderr) = Popen(["git", "rev-parse", "--verify", "--short", "HEAD"],
                                   stdout=PIPE, stderr=PIPE).communicate()
            head=head.strip()

    (changes, stderr) = Popen(["git", "log", "--oneline",  base+".."+head],
                              stdout=PIPE, stderr=PIPE).communicate()
    if stderr:
        print("base and head are not real")
        return False
    changes = "\n".join(["#    " + c for c in changes.split("\n")])

    if not project:
        print("no project found")
        return False

    initial_message = """


# please title and explain this pull request
# in normal git format
# comments will not be shown
# """+head+" onto "+base+"""
#
"""+changes

    title, body = getMessage(initial_message)
    if title is None or body is None:
        print("incomplete message")
        return False

    head = gh.username+":"+head
    # base = gh.username+":"+base
    request = gh.pull_request(base=base, head=head, title=title, body=body, repo_name=project)
    if request:
        print((request["number"]))
    return request

def parseArgs():
    parser = argparse.ArgumentParser("github")
    parser.add_argument("--debug", action="store_true")
    subparsers = parser.add_subparsers()

    repoParser = subparsers.add_parser('repo')
    repoParser.add_argument('verb', choices=['create', 'delete', 'edit', 'list', 'open'], nargs=1)
    repoParser.add_argument('--private', action="store_true")
    repoParser.add_argument('--public', action="store_true")
    repoParser.add_argument('--description', type=str)
    repoParser.add_argument('repo', type=str, nargs="?")
    repoParser.set_defaults(func=repoCommand)

    collabParser = subparsers.add_parser('collab')
    collabParser.add_argument('verb', choices=['add', 'remove', 'list'], nargs=1)
    collabParser.add_argument('--repo', type=str)
    collabParser.add_argument('collab', type=str, nargs="?")
    collabParser.set_defaults(func=collabCommand)

    keyParser = subparsers.add_parser('key')
    keyParser.add_argument('verb', choices=['add', 'remove', 'list'], nargs=1)
    keyParser.add_argument('--key', type=str)
    keyParser.add_argument('name', type=str, nargs="?")
    keyParser.set_defaults(func=keyCommand)

    forkParser = subparsers.add_parser('fork')
    forkParser.set_defaults(func=forkCommand)

    pullParser = subparsers.add_parser('pull')
    pullParser.add_argument('verb', choices=['request', 'list', 'checkout', 'diff', 'patch', 'info', 'comment'], nargs=1)
    pullParser.add_argument('--base', type=str)
    pullParser.add_argument('--head', type=str)
    pullParser.add_argument('request', nargs="?")
    pullParser.set_defaults(func=pullCommand)

    issueParser = subparsers.add_parser('issue')
    issueParser.add_argument('verb', choices=['create', 'list', 'info', 'comment'], nargs=1)
    issueParser.add_argument('issue', nargs='?')
    issueParser.set_defaults(func=issueCommand)

    setupParser = subparsers.add_parser('setup')
    setupParser.set_defaults(func=lambda a,g: GitHub.setup_config())

    args = parser.parse_args()
    return args


if __name__ == "__main__":
    try:
        (username, token) = GitHub.get_authentication_from_config()
        if username and token:
            gh = GitHub(username, token)
            args = parseArgs()
            if args.debug:
                gh.debug = True
            if not args.func(args,gh):
                print("Error")
        else:
            GitHub.setup_config()
    except KeyboardInterrupt:
        pass

