#!/usr/bin/env bash
arg="$1"
shift

[ "${arg}" == "--help" ] && echo "this command, try build help" && exit

build::location() {
    local location="$(cd $(dirname $([ -L "${BASH_SOURCE}" ] && readlink "${BASH_SOURCE}" || echo "${BASH_SOURCE}")) && pwd)"
    if [ -L "${location}" ]; then
        readlink "${location}"
    else
        echo "${location}"
    fi
}

buildpathadd() { [[ ":${BUILD_PATH}:" != *":$1:"* ]] && export BUILD_PATH="${BUILD_PATH:+"${BUILD_PATH}:"}$1"; }


buildpathadd $(cd "$(build::location)"/.. || exit; pwd -P)
buildpathadd ~/.local-dot/commands

build::run() {

IFS=: read -r -d '' -a path_array < <(printf '%s:\0' "${BUILD_PATH}")
for p in "${path_array[@]}"; do
    if [ "${p}" != "" ]; then
        commanddir="${p}"
        commandsh="${commanddir}/${arg}/${arg}"
        if [ -f "${commandsh}" ]; then
            break
        fi
        commandsh="${commanddir}/${arg}/main.sh"
        if [ -f "${commandsh}" ]; then
            break
        fi
        commandsh="${commanddir}/${arg}/main.py"
        if [ -f "${commandsh}" ]; then
            break
        fi
        commandsh=""
    fi
done

if [ "${commandsh}" != "" ]; then
    [ "$0" = "${BASH_SOURCE}" ] || start="."
    ${start} "${commandsh}" "$@"
else
    # echo "Available Commands"
    for p in "${path_array[@]}"; do
        if [ "${p}" != "" ]; then
            commanddir="${p}"
            for c in ${commanddir}/*; do
                # echo
                basename "${c}" #| sed 's/^/  /'
                # $c/`basename "$c"` --help  | sed 's/^/    /'
            done
        fi
    done
fi
}


_completion()
{
    _script_commands=$(build::run | tr '\n' ' ')

    local cur prev
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    if [[ ${COMP_CWORD} -ge 3 ]]; then
        _filedir
    elif [ "${prev}" == "" ] || [ "${prev}" == "build" ]; then
        COMPREPLY=( $(compgen -W "${_script_commands}" -- "${cur}") )
    else
        _script_commands=$(build::run "${prev}" --help | sed 's/[ :].*//' | tr '\n' ' ')
        if [[ "${_script_commands}" == usage* ]]; then
            _script_commands=$(build::run "${prev}" --help 2>&1 | grep '{' | sed 's/.*{//g; s/}.*//; s/,/ /g')
        fi
        COMPREPLY=( $(compgen -W "${_script_commands}" -- "${cur}") )
    fi


  return 0
}

if [ "${arg}" == "--completion" ]; then
    if [ "$0" = "${BASH_SOURCE}" ]; then
        echo "warning, not being sourced"
    fi
    if command -v complete >/dev/null 2>&1; then
        complete -o nospace -F _completion build
    fi

    [ "$0" = "${BASH_SOURCE}" ] && exit || return
fi

build::run "$@"
