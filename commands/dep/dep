#!/usr/bin/env python3

from argparse import ArgumentParser
import os
import glob
from package import Package
from manager import Manager
from manager import get_managers
from manager import bootstrap


def get_file(filename):
    expanded = os.path.expanduser(filename)
    if os.path.isfile(expanded):
        with open(expanded, "r") as d:
            lines = d.readlines()
            if len(lines) > 0 and lines[0].startswith("#!"):
                return []
            return lines
    return []


def get_all(base="~/.DEP"):
    filelines = get_file(base)
    packages = []
    for fileline in filelines:
        fileline = fileline.rstrip("\n")
        if len(fileline) == 0:
            continue
        package = Package.FromString(fileline)
        if package.manager == "include":
            for f in glob.glob(os.path.expanduser(package.name), recursive=True):
                packages += get_all(f)
        else:
            if package.manager == "package":
                package.manager = "brew"

                second = Package()
                second.manager = "apt"
                second.name = package.name
                second.optional = package.optional
                packages.append(second)

            packages.append(package)
    return packages


def get_deps():
    packages = get_all()
    managers = get_managers()
    per = {}
    for package in packages:
        if package.optional:
            continue

        manager = package.manager
        if not manager in managers.keys():
            print(f"skipping unknown {package}")
            continue
        if managers[manager].ignore(package.name):
            continue

        if not manager in per:
            per[manager] = set()
        per[manager].add(package.name)

    return per


def install(managers, desired, yes=False):
    install = {}
    for m in desired:
        manager = managers[m]
        installed = manager.get_list()
        wanted = desired[m]
        for w in wanted:
            if manager.package_name(w) in installed:
                continue
            if not m in install:
                install[m] = []
            install[m].append(w)

    for m in install:
        for i in install[m]:
            print(f"{m} {i}")

    if not install:
        return True

    failed = []
    print()
    if yes or input("install [yN]: ").lower().startswith("y"):
        if not yes:
            print()
        for m in install:
            for i in install[m]:
                print(f"installing {i}...")
                if not managers[m].install(i):
                    failed.append(f"{m} {i}")

    if failed:
        print()
        for f in failed:
            print(f"failed to install {f}")
        return False

    return True


def clean(managers, desired):
    round_one = True
    while True:
        uninstall = {}
        for m in managers:
            if not managers[m].supports_current_platform():
                continue
            for i in managers[m].get_leaves():
                found = False
                if m in desired:
                    for d in desired[m]:
                        if managers[m].package_name(d) == i:
                            found = True
                            break
                if not found:
                    if not m in uninstall:
                        uninstall[m] = []
                    uninstall[m].append(i)

        if not uninstall:
            return True

        if round_one:
            round_one = False
        else:
            print()

        for m in uninstall:
            for i in uninstall[m]:
                print(f"{m} {i}")

        print()
        if input("uninstall [yN]: ").lower().startswith("y"):
            print()
            for m in uninstall:
                for i in uninstall[m]:
                    print(f"uninstalling {i}...")
                    if not managers[m].uninstall(i):
                        return False
        else:
            return True
    return True


def get_current():
    all_wanted = get_deps()
    managers = get_managers()
    for d in managers:
        manager = managers[d]
        wanted = []
        if d in all_wanted:
            wanted = all_wanted[d]
        install = []
        uninstall = []
        for w in wanted:
            if manager.is_installed(w):
                continue
            install.append(w)
        for i in manager.get_leaves():
            found = False
            for w in wanted:
                if manager.package_name(w) == i:
                    found = True
                    break
            if not found:
                uninstall.append(i)

        print()
        print(f"{d} -----")
        for i in install:
            print(f"+ {i}")
        for u in uninstall:
            print(f"- {u}")


def parse():
    parser = ArgumentParser(description="Manage your packages.")
    subparsers = parser.add_subparsers(title="commands", dest="command")

    install = subparsers.add_parser(
        "install", help="Evaluate DEP and install missing packages."
    )
    install.add_argument(
        "-y",
        "--yes",
        default=False,
        action="store_true",
        help="Do not ask for confirmation before installing.",
    )
    clean = subparsers.add_parser(
        "clean", help="Evaluate DEP and remove unneeded packages."
    )

    return parser.parse_args()


def run():
    args = parse()
    if not bootstrap():
        return False
    if args.command == "install":
        return install(get_managers(), get_deps(), yes=args.yes)
    elif args.command == "clean":
        return clean(get_managers(), get_deps())


if __name__ == "__main__":
    try:
        exit(0 if run() else 1)
    except KeyboardInterrupt:
        print("\nexiting")
        exit(1)
