#!/usr/bin/env bash

scriptdir=$(cd $(dirname $([ -L $0 ] && readlink $0 || echo $0)) && pwd)

next_cache=~/.gcal_next.cache
agenda_cache=~/.gcal_agenda.cache
timeout() {
    build timeout "$@"
}

event() {
    if [ "$1" == "-e" ]; then
        shift;
        gcalcli edit $@;
    elif [ "$1" == "-s" ]; then
        shift;
        gcalcli search $@;
    elif [ "$1" == "-d" ]; then
        shift;
        gcalcli delete $@;
    elif [ "$1" != "" ]; then
        gcalcli $@;
    else
        read -p 'Calendar [Me]: ' CAL;
        if [ "$CAL" == "" ];
            then CAL=Me;
        fi;
        gcalcli add --calendar "$CAL" $EVENT;
    fi;
};

cache() {
    cache_agenda
    cache_next
}

cache_agenda() {
    a=`timeout 5 /usr/local/bin/gcalcli --tsv --details location agenda --nostarted 2>/dev/null`;
    if [ "$a" != "" ]; then
        echo "$a" |awk -F '	' '
        function twelve(t) {
            split(t,A,":");
            r=A[1]-0 ":" A[2] "AM"
            if (A[1] > 12) {A[1] = A[1]-12; r=A[1] ":" A[2] "PM"}
            if (A[1] < 10) {r=" " r}
            return r
        }
        BEGIN {date="none"; used="no"}
        {
            day="           ";
            time="TIME"; start=""; end=""
        }
        $1 != date {
            ("date -jf \"%Y-%m-%d\" \""$1"\" \"+%a, %b %d\"" | getline daydate);
            day="\033[33m" daydate "\033[0m";
            print "";
        }
        {
            # ("date -jf \"%H:%M\" \""$2"\" \"+%l:%M%p\"" | getline start);
            start=twelve($2)
            end=twelve($4)
            time="\033[34m" start "\033[0m \033[34m" end "\033[0m";
            loc="\033[36m" substr($6,1,25) "\033[0m"
            if ($2 == "00:00") {time="               "};
            event="\033[35m" $5 "\033[0m";
            if (used=="no") {event="\033[35m" $5 "\033[0m"};
            used="yes";
            print day "  " time " " event " " loc ""; date=$1;
        }
' > $agenda_cache
    fi
}

fetch_agenda() {
    if [ "$1" == "--fetch" ]; then shift; cache_agenda; fi
    if [ "$1" == "--limited-fetch" ]; then
        shift
        difference=`echo $(( $(date +%s) - $(stat -f%c $agenda_cache) ))`
        if [ "$difference" -ge "$1" ]; then cache_agenda; fi
        shift
    fi
    cat $agenda_cache
}

cache_next() {
    next="`timeout 5 /usr/local/bin/gcalcli --nocolor --nostarted agenda today tomorrow`"
    if [ "$next" != "" ]; then
        next="`echo $next | grep -v 'No Events' | head -2 | tail -1 | grep -v '^$'`"
        echo "$next" > $next_cache
    fi
}

fetch_next() {
    if [ "$1" == "--fetch" ]; then shift; cache_next; fi
    if [ "$1" == "--limited-fetch" ]; then
        shift
        difference=`echo $(( $(date +%s) - $(stat -f%c $next_cache) ))`
        if [ "$difference" -ge "$1" ]; then cache_next; fi
        shift
    fi
    cat $next_cache | cut -d ' ' -f4- | sed -e 's/^[ \t]*//' | cut -c 1-25
}


upcoming() {
    timeout 3 /usr/local/bin/gcalcli remind $1 'echo %s'
}
# c="`/usr/local/bin/gcalcli --tsv agenda --nostarted --detail_all --nocolor today 2050 2>/dev/null`"

a=$1
shift
if [ "$a" == "event" ]; then
    event $@
elif [ "$a" == "cache" ]; then
    cache $@
elif [ "$a" == "next" ]; then
    fetch_next $@
elif [ "$a" == "agenda" ]; then
    fetch_agenda $@
elif [ "$a" == "upcoming" ]; then
    upcoming $@
else
    echo "event: same as gcalcli but has shortcuts:"
    echo "      no argument creates a new event interactively"
    echo "      -e edit event (same as gcalcli edit)"
    echo "      -s search events (gcalcli search)"
    echo "      -d delete event (gcalcli delete)"
    echo "cache: caches the next event and agenda"
    echo "next [--fetch]: get the next event name, optionally attempt to fetch"
    echo "agenda [--fetch]: get the agenda, optionally attempt to fetch"
    echo "upcoming mins: all events starting in the next mins minutes"
    echo
    echo "--fetch can be replaced with --limited-fetch seconds"
    echo "which only fetches if data is that old"
fi
