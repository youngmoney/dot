#!/usr/bin/env python2.7
import os, glob
import argparse


def confirm(prompt):
    while True:
        try:
            i = raw_input(prompt+" ")
        except KeyboardInterrupt:
            return False
        if i.lower() in ('yes','y', ''): return True
        elif i.lower() in ('no','n'): return False

def prompt(prompt):
    try:
        return raw_input(prompt+" ")
    except KeyboardInterrupt:
        return ""

def backup(f):
    pass

def get_backups(f):
    a = glob.glob(f+"/*.backup") + glob.glob(f+"/.*.backup")
    # a = [s[:-len(".backup")] for s in a]
    return a

def get_all(f, dots=False, all=False):
    a = glob.glob(f+"/*")
    if dots: a += glob.glob(f+"/.*")
    if not all:
        a = filter(lambda f: not os.access(f, os.X_OK), a)
        a = filter(lambda f: os.path.isfile(f), a)
    return a


def move(frm, to, prefix=".", backup=True, force=False, all=False):
    to_move = get_all(frm, all=all)

    backs = get_backups(to)
    a = get_all(to, True)
    backups = []
    actuals = []
    for f in to_move:
        base = os.path.basename(f)
        new = os.path.join(to, "."+base)
        as_backup = new+".backup"
        if as_backup in backs:
            backups.append(base+".backup")
        if new in a:
            actuals.append(base)
    if not force and not backup and len(actuals) > 0:
        print "Found:", actuals
        return

    if not force and backup and len(backups) > 0:
        print "Found Backups:", backups
        return

    for f in to_move:
        base = os.path.basename(f)
        new = os.path.join(to, "."+base)
        as_backup = new+".backup"
        if os.path.lexists(new):
            if backup:
                os.rename(new, as_backup)
            else:
                os.remove(new)
        try:
            os.symlink(f ,new)
        except:
            exit("Error "+str(new))


def parseArgs():
    parser = argparse.ArgumentParser("dot")
    parser.add_argument("--debug", action="store_true")
    parser.add_argument("-f", dest="force", action="store_true")
    parser.add_argument("--no-backup", action="store_true")
    parser.add_argument("--all", action="store_true")
    parser.add_argument("from_directory", type=str)

    args = parser.parse_args()
    return args


if __name__ == "__main__":
    home = str(os.path.expanduser("~"))
    args = parseArgs()
    move(os.path.realpath(args.from_directory), home, backup=not args.no_backup, force=args.force, all=args.all)
