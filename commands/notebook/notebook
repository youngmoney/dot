#!/usr/bin/env python2.7
from argparse import ArgumentParser
import sys, os, subprocess, copy, re, datetime
import yaml

def read_defaults(d, name="defaults.yaml"):
    f = os.path.join(d, name)
    try:
        stream = open(f, "r")
    except Exception as e:
        return {}
    return yaml.safe_load(stream)


def read_meta(f):
    md = open(f, "r")
    meta = []
    reading_meta = False
    for l in md.readlines():
        line = l.strip("\n")
        if line == "---":
            reading_meta = not reading_meta
        elif reading_meta:
            meta.append(line)

    metaDict = yaml.safe_load("\n".join(meta))
    if not metaDict: return {}
    return metaDict

def merge_dict(big, little):
    if not isinstance(little, dict):
        return little
    if not isinstance(big, dict):
        return little

    nd = copy.copy(big)
    for k in little:
        if k in nd:
            if isinstance(little[k], dict):
                nd[k] = merge_dict(nd[k], little[k])
                continue
        nd[k] = little[k]
    return nd

def get_option(o, m, default=None):
    """ returns option from a dictionary of the form key.key.key"""
    keys = o.split('.')
    while keys:
        k = keys.pop(0)
        if k in m and isinstance(m, dict):
            if keys:
                m = m[k]
            else:
                return m[k]
        else:
            break

    return default

def parse_and_run():
    parser = ArgumentParser(description="Execute Markdown Code Blocks")

    parser.add_argument("--line", help="lines to execute line|line-line|-line|line- comma seperated")

    parser.add_argument("filename", help="Markdown file")
    args = parser.parse_args()

    if not os.path.isfile(args.filename):
        args.filename = args.filename+".md"
    if not os.path.isfile(args.filename):
        raise ValueError("Could Not Find File "+args.filename)
    filename = args.filename

    full_meta = read_meta(args.filename)
    meta = full_meta
    script_directory, script_name=os.path.split(os.path.realpath(__file__))
    defaults = read_defaults(script_directory)
    local = os.getenv("LOCALDOT")
    if local:
        local_defaults = read_defaults(os.path.join(local, "conf"), "notebook.yaml")
        defaults = merge_dict(defaults, local_defaults)
    meta = get_option('notebook', meta, {})
    if meta is None:
        meta = defaults
    else:
        meta = merge_dict(defaults, meta)
    run(filename,meta , full_meta, args.line)


OUTPUT_START = '<!-- notebook output start -->'
OUTPUT_END= '<!-- notebook output end -->'

class Item(object):
    CODE_TYPE = "CODE_TYPE"
    TEXT_TYPE = "TEXT_TYPE"
    OUTPUT_TYPE = "OUTPUT_TYPE"

    def __init__(self, lines, type=TEXT_TYPE):
        self.lines = lines
        self.type = type
        self.start = -1
        self.end = -1
        self.options = {}
        if self.type == Item.CODE_TYPE:
            self.options = self._parse_options()

    def _parse_options(self):
        if len(self.lines) < 1:
            return {}
        else:
            start = self.lines[0]
            if len(start) > len(MARK_CODE):
                command = start[len(MARK_CODE):]
                opts = {}
                p1 = '[^\w-]([\w\-]+)* ?= ?"(.*?)"'
                p2 = '[^\w-]([\w\-]+) ?= ?\'(.*?)\''
                for k,v in re.findall(p1, start)+re.findall(p2, start):
                    opts[k] = v
                if command and not opts:
                    opts = {'command':command}
                return opts
        return {}


    def set_range(self, start, end):
        self.start = start
        self.end = end

    def has_line(self, l):
        return self.start <= l and l <= self.end

    def get_lines(self):
        return self.lines

    def get_options(self):
        return self.options

    def get_code(self):
        assert self.type == Item.CODE_TYPE
        return '\n'.join(self.lines[1:-1])

    def get_command(self):
        assert self.type == Item.CODE_TYPE
        return None

    def get_type(self):
        return self.type

    def __repr__(self):
        return '<Item: %s>\n%s</Item>' % (self.type, self.lines)

MARK_CODE = '```'

def mark(lines):
    output = []
    for l in lines:
        stripped = l.strip()
        mark = None
        if stripped.startswith(MARK_CODE):
            mark = MARK_CODE
        elif stripped == OUTPUT_START:
            mark = OUTPUT_START
        elif stripped == OUTPUT_END:
            mark = OUTPUT_END
        output.append((l.rstrip('\n'), mark))
    return output

def find_end(marks, start, match):
    for i in range(start, len(marks)):
        if match(marks[i][0], marks[i][1]):
            return i
    raise ValueError("error looking for end of from line %d" % (start))


def block(marks):
    sets = []
    skip = 0
    for i in range(len(marks)):
        if skip > 0:
            skip -= 1
            continue
        l, m = marks[i]
        if m == MARK_CODE:
            j = find_end(marks, i+1, lambda l,m: m == MARK_CODE)
            sets.append((i,j, Item.CODE_TYPE))
            skip = j-i
        if m == OUTPUT_START:
            j = find_end(marks, i+1, lambda l,m: m == OUTPUT_END)
            sets.append((i,j, Item.OUTPUT_TYPE))
            skip = j-i

    lines = [l for l,m in marks]
    blocks = []
    last_i = 0
    for s in sets:
        i, j, t = s
        if last_i < i:
            blocks.append(Item(lines[last_i:i]))

        item = Item(lines[i:j+1], t)
        item.set_range(i,j)
        blocks.append(item)
        last_i = j+1

    if last_i < len(lines):
        blocks.append(Item(lines[last_i:i]))
    return blocks

def fill_in_command(c, r, code, f):
    o = []
    u = []
    for p in c:
        for m in re.findall('\$([\[\]\w\-\.]+)\$', p):
            s = get_option(m, f)
            pre = '_arg['
            if not s and m.startswith(pre) and len(m) > len(pre) + 1:
                pn = m[len(pre):-1]
                n = -1
                try:
                    n = int(pn)
                except:
                    pass
                if n > 0 and n-1 < len(r):
                    s = r[n-1]
                    u.append(n-1)
            content = '_content'
            if not s and m.startswith(content):
                s = code
                if m == content+'_joined':
                    s = s.replace('\n', ' ')
                if m == content+'_joined_strict':
                    s = s.replace('\n', '')
            if s:
                p = p.replace('$%s$' % (m), str(s)).split(' ')

        o.append(p)
    for i in reversed(sorted(u)):
        del r[i]
    return o + r

def execute(code,meta, full_meta):
    command = get_option('command', meta)
    if not command:
        raise ValueError("No command")
    command = command.split(' ')
    rest = []
    if not '.' in command[0]:
        possible = get_option('commands.%s.command' % (command[0]), meta)
        if possible:
            rest = command[1:]
            command = possible.split(' ')
    command = fill_in_command(command, rest, code, full_meta)
    interpreter = subprocess.Popen(command, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = interpreter.communicate(code)
    return (stdout + stderr).rstrip('\n').split('\n')

def wrap_output(l, code, meta):
    IND = '>        '
    display = get_option('display', meta)
    displays = ['quote', 'raw']
    if display not in displays:
        raise ValueError('Display "%s" not in %s' % (display, displays))
    if display == 'quote':
        l = [IND+li for li in l]
    date = '<!-- notebook output modified %s -->' % (datetime.datetime.now().strftime("%Y-%m-%d %T"))
    return [OUTPUT_START, date]+l+[OUTPUT_END]

def run(filename, meta, full_meta, line_to_exec):
    md = open(filename, 'r')
    contents = md.readlines()
    marked = mark(contents)
    blocked = block(marked)
    combined = blocked

    outputs = []
    for i in range(len(combined)):
        item = combined[i]
        if item.get_type() == Item.CODE_TYPE:
            if line_to_exec is not None:
                if not item.has_line(int(line_to_exec)):
                    continue
            opts = merge_dict(meta, item.get_options())
            o = execute(item.get_code(), opts, full_meta)
            outputs.append((i,Item(wrap_output(o, item, opts), Item.OUTPUT_TYPE)))

    inserts = 0
    for i,o in outputs:
        inserts += 1
        combined.insert(i+inserts,Item(['']))
        inserts += 1
        combined.insert(i+inserts,o)

    lines = []
    i = 0
    for item in combined:
        if item.type == Item.OUTPUT_TYPE:
            p = combined[i-1] if i > 0 else None
            p2 = combined[i-2] if i > 1 else None
            skip = False
            if (p and p.type == Item.OUTPUT_TYPE) or (p and p.type == Item.TEXT_TYPE and p.get_lines() == [''] and p2 and p2.type == Item.OUTPUT_TYPE):
                lines = lines[:-1]
                i += 1
                continue
        prev = item
        i += 1
        lines += item.get_lines()

    md_out = open(filename, 'w')
    md_out.write('\n'.join(lines))
    md_out.close()

if __name__ == "__main__":
    exit(0 if parse_and_run() else 1)
