#!/usr/bin/env python2.7
from argparse import ArgumentParser
import sys, os, subprocess
import yaml

def read_meta(f):
    md = open(f, "r")
    meta = []
    reading_meta = False
    for l in md.readlines():
        line = l.strip("\n")
        if line == "---":
            reading_meta = not reading_meta
        elif reading_meta:
            meta.append(line)

    metaDict = yaml.safe_load("\n".join(meta))
    if not metaDict: return {}
    return metaDict

def makeYAML():
    os.system("cat *.ris | pandoc-citeproc -f ris -y")

def parse_and_run():
    parser = ArgumentParser(description="Wrapper for Pandoc (must have pandoc installed)")
    parser.add_argument("-o", dest="open", action="store_true", help="Open Created File")
    parser.add_argument("-tex", dest="tex", action="store_true", help="force text output instead of pdf")

    #parser.add_argument('-bib', action='store_true', help="Search for .ris files and create a YAML bib")
    parser.add_argument("filename", help="Markdown file (if 'bib' then all .ris files in the directory will be processes into a YAML bib for pandoc)")
    args = parser.parse_args()

    if args.filename == "bib":
        makeYAML()
        return True

    if not os.path.isfile(args.filename):
            args.filename = args.filename+".md"
    if not os.path.isfile(args.filename):
            print("Could Not Find File "+args.filename)
            return
    filename = args.filename

    meta = read_meta(args.filename)

    script_directory, script_name=os.path.split(os.path.realpath(__file__))
    defaults = read_defaults(script_directory)

    template = None
    if "type" in meta:
        template = meta["type"]
    elif "type" in defaults:
        template = defaults["type"]

    if not template:
        print("No template specified")
        return

    for k in meta:
        if k in defaults:
            del defaults[k]

    metafaults = meta
    for k in defaults:
        if k not in meta:
            metafaults[k] = defaults[k]

# Grab Emails before Pandoc
    mailFields = {"To":None, "From":"-F", "ReplyTo":"-R", "Bcc":"-b", "Cc":"-c", "Subject":"-s"}
    for m in mailFields:
        if m in metafaults:
            if "sendmail" in metafaults:
                args = metafaults["sendmail"].split(" ")
            else:
                args = ["sendmail"]

            endargs = []

            for m in metafaults:
                if m in mailFields:
                    if mailFields[m] and metafaults[m]:
                        args.extend([mailFields[m], metafaults[m]])
                    elif metafaults[m]:
                        endargs.extend(metafaults[m].split(","))
            args.extend(endargs)

            # if "From" in metafaults:
            #     args.extend(["-F", metafaults["From"]])
            # if "ReplyTo" in metafaults:
            #     args.extend(["-R", metafaults["ReplyTo"]])
            # if "Bcc" in metafaults:
            #     args.extend(["-b", metafaults["Bcc"]])
            # if "Cc" in metafaults:
            #     args.extend(["-c", metafaults["Cc"]])
            # if "Subject" in metafaults:
            #     args.extend(["-s", metafaults["Subject"]])
            # if "To" in metafaults:
            #     args.extend(metafaults["To"].split(","))
            try:
                if "debug" in meta:
                    print(" ".join(args))
                body = subprocess.check_output(('pandoc', '-t', 'plain', filename))
                mailer = subprocess.Popen(args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                stdout, stderr = mailer.communicate(body)
                print(stdout)
                print(stderr)
            except:
                print("Sendmail Error")
                return
            exit(0)



    if "./" in template:
        pass
    else:
        template = script_directory+"/templates/"+template
        pass

    template_exts = ["html", "tex", "rtf"]
    template_ext = ""
    template_name = template
    while not os.path.isfile(template) and len(template_exts)>0:
            template_ext = template_exts[0]
            template = template_name + "." + template_exts[0]
            template_exts.pop(0)
    if not os.path.isfile(template):
            print(("Template not found: "+template))

    ext = template.split(".")[-1]
    if ".tex" in template and "tex" not in meta and not args.tex: ext = "pdf"

    cslDefault = "mla-annotated"
    if "csl" in metafaults: cslDefault = metafaults["csl"]
    defaultCSL = script_directory+"/templates/"+cslDefault+".csl"

    file_name = ".".join(filename.split(".")[:-1])
    outfile = file_name+"."+ext
    command = ["pandoc", args.filename, "-o", outfile, "--template", template]
    #command +=["--filter", script_directory+"/section.filter.py"]
    command.extend(["--var", "filename="+file_name])
    if "args" in meta: 
        command.extend(meta["args"].split(" "))
    #command.extend(["--highlight-style", "kate"])
    if "bibliography" in meta or "references" in meta:
        command.extend(["--filter", "pandoc-citeproc"])
    if not "csl" in meta:
        command.extend(["--csl", defaultCSL])
    for d in defaults:
        command.extend(["--var", str(d)+"="+str(defaults[d])])
    try:
        if "debug" in meta:
            print(" ".join(command))
        response = subprocess.check_output(command)
    except:
        print("Pandoc Error")
        return

    if args.open:
        subprocess.check_output(["open", outfile])

    return True

def read_defaults(d):
    stream = open(d+"/defaults.yaml", "r")
    return yaml.safe_load(stream)


if __name__ == "__main__":
    parse_and_run()
    exit(0)
