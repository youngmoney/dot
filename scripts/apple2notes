#!/usr/bin/env bash

if [ "$1" == "install" ]; then
    mkdir -p ~/Library/LaunchAgents
    cat << EOF > ~/Library/LaunchAgents/local.apple2notes.plist
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>local.apple2notes.plist</string>
    <key>KeepAlive</key>
    <false/>
    <key>RunAtLoad</key>
    <false/>
    <key>Program</key>
    <string>/Users/$USER/local/dot/scripts/apple2notes</string>
    <key>StartCalendarInterval</key>
    <dict>
        <key>Hour</key>
        <integer>02</integer>
        <key>Minute</key>
        <integer>30</integer>
    </dict>
    <key>StandardErrorPath</key>
    <string>/tmp/apple2notes.err</string>
    <key>StandardOutPath</key>
    <string>/tmp/apple2notes.out</string>
    <key>Debug</key>
    <true/>
</dict>
</plist>
EOF
    launchctl unload -w ~/Library/LaunchAgents/local.apple2notes.plist >/dev/null 2>/dev/null
    launchctl load -w ~/Library/LaunchAgents/local.apple2notes.plist
    exit 0
fi

function backup::organicmaps() {
    for f in ~/Library/Mobile\ Documents/iCloud~app~organicmaps/Documents/*; do
        name="$(cat "$f" | grep '^  <name>' | sed 's/.*>\(.*\)<.*/\1/')"
        [ "$name" == "" ] && name=$(basename "$f" .kml)
        name="$(echo "$name" | tr ' ' '_' | tr '[:upper:]' '[:lower:]')"
        name="$(echo "$name" | sed 's/[^0-9a-z_\.]*//g' | sed 's/__/_/g')"
        out="$(echo ~/Documents/outdoor/map.organic."$name.${f##*.}")"
        cp "$f" "$out"
    done
    for f in ~/Library/Mobile\ Documents/iCloud~app~comaps/Documents/*; do
        name="$(cat "$f" | grep '^  <name>' | sed 's/.*>\(.*\)<.*/\1/')"
        [ "$name" == "" ] && name=$(basename "$f" .kml)
        name="$(echo "$name" | tr ' ' '_' | tr '[:upper:]' '[:lower:]')"
        name="$(echo "$name" | sed 's/[^0-9a-z_\.]*//g' | sed 's/__/_/g')"
        out="$(echo ~/Documents/outdoor/map.co."$name.${f##*.}")"
        cp "$f" "$out"
    done
}

function backup::reminders() {
    reminder2json --output-format=remindmd --exclude-lists='Repeating|Reminders|Grocery' | remind-md write > /tmp/reminder.all.md
    mv /tmp/reminder.all.md ~/Documents/exports.apple/apple.reminder.all.md
    reminder2json --output-format=remindmd --include-lists=Favorites --include-deleted | remind-md write > /tmp/reminder.favorites.md
    mv /tmp/reminder.favorites.md ~/Documents/exports.apple/apple.reminder.favorites.md
}

function backup::notes() {
  tmp="/tmp/notes-$(date +%Y-%m-%d-%H-%M-%S)"
  mkdir -p "$tmp"
  cd "$tmp" || exit 1
  note2md || exit 1
  rsync -av --dry-run --ignore-times --checksum --recursive --include='apple.note*' --include="apple.note*/*" --exclude='*' --delete converted/ ~/Documents/exports.apple > rsync.log
}

function backup::favorites() {
    while read -r line; do
        TITLE=$(echo "$line" | awk -F'SEP' '{print $1}' | sed 's/Instapaper Liked: //')
        TITLE="$(echo "$TITLE" | tr ' ' '_' | tr '[:upper:]' '[:lower:]')"
        TITLE="$(echo "$TITLE" | sed 's/[^0-9a-z_\.]*//g' | sed 's/__/_/g')"
        URL=$(echo "$line" | awk -F'SEP' '{print $2}')
        OUTPUT=~/Documents/exports.favorites/instapaper."$TITLE".md
        if [ ! -f "$OUTPUT" ]; then
            date >> /tmp/articles
            echo "$OUTPUT" "$URL" >> /tmp/articles
            web2markdown --user-agent curl-browser "$URL" > /tmp/article && cp /tmp/article "$OUTPUT" || echo "$URL"
        fi
    done < <(reminder2json --output-format=remindmd --include-lists=Favorites --include-deleted  | jq --raw-output '.reminders.iCloud.Favorites.[] | [.title, .notes] | join("SEP")' | tr -d '"' | grep 'Instapaper Liked')
}

function backup::google-maps() {
    jq '.features = [.features.[] | .properties["name"] = .properties.location.name | .properties["description"] = .properties.location.address + "\n" + .properties.google_maps_url + " on " + .properties.date | .properties.styleUrl = "#placemark-yellow" | .properties.style = "SYMBOL(id:https://omaps.app/placemarks/placemark-yellow.png)"]' ~/Documents/exports/google.maps.saved.json > /tmp/googlemapssaved
    ogr2ogr -q -f KML ~/Library/Mobile\ Documents/iCloud\~app\~organicmaps/Documents/Google\ Saved.kml -oo FLATTEN_NESTED_ATTRIBUTES=YES /tmp/googlemapssaved
    ogr2ogr -q -f KML ~/Library/Mobile\ Documents/iCloud\~app\~comaps/Documents/Google\ Saved.kml -oo FLATTEN_NESTED_ATTRIBUTES=YES /tmp/googlemapssaved
}


if [ "$(uname)" == "Darwin" ]; then
    for a in $@; do
        if [ "$a" == "organicmaps" ]; then
            backup::organicmaps
        fi
        if [ "$a" == "reminders" ]; then
            backup::reminders
        fi
        if [ "$a" == "notes" ]; then
            backup::notes
        fi
        if [ "$a" == "favorites" ]; then
            backup::favorites
        fi
        if [ "$a" == "googlemaps" ]; then
            backup::google-maps
        fi
    done
fi
