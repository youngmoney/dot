formatter:
  linters:
    - name: go
      command: gofmt -d "$FILENAME"
    - name: black
      command: black --check "$FILENAME"
    - name: shellcheck
      command: shellcheck "$FILENAME"
    - name: swift
      command: swift format lint --strict "$FILENAME"
  fixers:
    - name: go
      command: gofmt -l -w "$FILENAME"
    - name: black
      command: black "$FILENAME"
    - name: shellcheck
      command: shellcheck --format=diff "$FILENAME" | patch -p1
    - name: swift
      command: swift format -i "$FILENAME"
    - name: pandoc-markdown
      command: |
        {
        cat < "$FILENAME" | pandoc --from markdown "$FILENAME" --to markdown
          perl -e 'truncate STDOUT, tell STDOUT'
        } 1<> "$FILENAME"
  matchers:
    - path_regex: .*\.go
      fixer_name: go
      linter_name: go
    - path_regex: .*\.py
      fixer_name: black
      linter_name: black
    - shebang_regex: .*python3
      fixer_name: black
      linter_name: black
    - path_regex: .*\.sh
      fixer_name: shellcheck
      linter_name: shellcheck
    - shebang_regex: .*bash
      fixer_name: shellcheck
      linter_name: shellcheck
    - path_regex: .*\.swift
      fixer_name: swift
      linter_name: swift
    - path_regex: .*/local/.*\.md
      fixer_name: pandoc-markdown
commander:
  commands:
    - name: simple-state
      command: git helper state
      match_command: git -C $(pwd) rev-parse
    - name: ctrlp-modified-files
      command: git status --porcelain -z --untracked-files=all | tr '\0' '\n' | cut -c 4-
      match_command: git -C $(pwd) rev-parse
