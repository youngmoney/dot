if !filereadable(expand('~/.vim/bundle/vundle/README.md'))
  !git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
  !vim +BundleInstall +qall
  qa
endif
set nocompatible
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'


"Navigation
Bundle 'kien/ctrlp.vim'
Bundle 'djoshea/vim-autoread'
Bundle 'tpope/vim-eunuch'
Bundle 'kshenoy/vim-signature'
Bundle 'Valloric/ListToggle'

Bundle 'epeli/slimux'
Bundle 'christoomey/vim-tmux-navigator'

"Completion
Bundle 'SirVer/ultisnips'
Bundle 'honza/vim-snippets'
Bundle 'nvie/vim-flake8'
"Bundle 'Valloric/YouCompleteMe'

"Whitespace and Characters
Bundle 'ntpeters/vim-better-whitespace'
Bundle 'vim-scripts/yaifa.vim'
Bundle 'Raimondi/delimitMate'
Bundle 'tpope/vim-surround'
Bundle 'tomtom/tcomment_vim'

"Text
Bundle 'vim-pandoc/vim-pandoc-syntax'
Bundle 'dhruvasagar/vim-table-mode'

let pluginrc=$LOCALDOT . '/conf/plugin.vim'
if filereadable(pluginrc)
  exe 'source' . pluginrc
endif

"So Crucial
filetype on
filetype plugin indent on
syntax on

silent !mkdir -p ~/.vim/backup ~/.vim/swap >/dev/null 2>&1
set wildignore+=*.so,*.swp,*.zip,*.d,*.o,*.class,build/*,*.pdf
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set backspace=2
set tags=.tags;/ 
let mapleader=","
set laststatus=2
set updatetime=5
let autoreadargs={'autoread':1}

map <leader><leader>r :source ~/.vimrc <Return>
map <leader><leader>i :source ~/.vimrc <Return> :BundleInstall<Return>:q<Return>
map <leader><leader>u :source ~/.vimrc <Return> :BundleClean<Return>:BundleInstall!<Return>:q<Return>

autocmd Filetype crontab set backupcopy=yes

"YCM
let g:ycm_path_to_python_interpreter = '/usr/bin/python'
let g:clang_exec = '/usr/local/bin/clang'
let g:clang_library_path = '/usr/local/lib/libclang.dylib'
let g:clang_library_path = '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/libclang.dylib'
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_error_symbol = '!'
let g:ycm_warning_symbol = '?'
let g:ycm_filepath_completion_use_working_dir = 1

"UltiSnips
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger = g:UltiSnipsExpandTrigger
let g:UltiSnipsJumpBackwardTrigger = "<c-n>"
let g:ulti_expand_or_jump_res = 0

"CtrlP
let g:ctrlp_extensions = ['tag']
let g:ctrlp_open_new_file = 'r'

"Slime
let g:slimux_select_from_current_window = 1
map <Leader>. :SlimuxREPLSendLine<CR>
map <Leader>> :SlimuxREPLSendBuffer<CR>
vmap <Leader>. :SlimuxREPLSendSelection<CR>

"Table
let g:table_mode_corner_corner='+'
let g:table_mode_corner='+'

"Colors
set statusline=%<\ %f\ %m%r%y%=%-20.(%l/%L-%c%V\ (%P)%)
set vb "t_vb
colo slate
set cursorline
set hlsearch
autocmd Filetype text set ft=pandoc
autocmd Filetype pandoc set cursorline!
autocmd WinEnter * setlocal cursorline
autocmd WinLeave * setlocal nocursorline
set fillchars+=vert:\ 

"Tabs
set expandtab
set shiftwidth=4
set smartindent
set smarttab

"Markdown
autocmd Filetype markdown set updatetime=50
autocmd Filetype markdown syntax match mdReminder "<!--+.*-->"
autocmd Filetype markdown highlight link mdReminder Todo
autocmd Filetype markdown syntax match mdTodo "<!---.*-->"
autocmd Filetype markdown highlight link mdTodo Todo
autocmd Filetype markdown syntax match mdAlert "<!--.*!.*-->"
autocmd Filetype markdown highlight link mdAlert Error
autocmd Filetype markdown syntax match mdMath "\$\_.\{-}\$"
autocmd Filetype markdown highlight link mdMath Structure
autocmd Filetype markdown set textwidth=80
autocmd Filetype markdown syntax match mdBudget "^\(in\|tx\|bg\|ex\) .*$"
autocmd Filetype markdown highlight link mdBudget Ignore
highlight nonascii guibg=Red ctermbg=1 term=standout
au BufReadPost * syntax match nonascii "[^\u0000-\u007F]"

"Shortcuts
inoremap kj <Esc>
noremap kj <Esc>
autocmd InsertLeave * set nopaste
map <leader>p :set paste<Return>i
map <leader>n :set nu!<Return>
map <leader>s :set spell!<Return>
map <leader>z ]s
map <leader>zz 1z=
map <Bslash> :noh<Return>
map <leader>h :e %:p:s,.h$,.X123X,:s,.c$,.h,:s,.X123X$,.c,<CR>
map <leader>hh :sp %:p:s,.h$,.X123X,:s,.cc$,.h,:s,.X123X$,.cc,<CR>


map <leader>gb :execute "!git blame -L".line('.').",+3 ".expand("%")<return>

map <leader>b :make<Return>:call ShowErrors()<Return>
map <leader>r :make run -s<Return>:call ShowErrors()<Return>
map <leader>c :make check -s<Return>:call ShowErrors()<Return>

map <leader>k :cprevious<Return>
map <leader>j :cnext<Return>
map <leader>cc :cclose<Return>

autocmd BufRead,BufNewFile .cron set ft=crontab
autocmd Filetype java set errorformat+=%A%f:%l:\ %m,%-Z%p^,%-C%.%#
autocmd Filetype java set makeprg=javac\ %
autocmd Filetype python map <leader>b :w<Return>:!python %<Return>
autocmd Filetype python map <leader>r :w<Return>:!python %<Return>
autocmd FileType python map <leader>f :w<Return>:call Flake8()<CR>
autocmd Filetype ruby map <leader>b :w<Return>:!ruby %<Return>
autocmd Filetype ruby map <leader>r :w<Return>:!ruby %<Return>
autocmd Filetype markdown map <leader>r :w<Return>:execute "!build markdown -o %"<Return><Return>
autocmd Filetype markdown map <leader>b :w<Return>:execute "!build markdown -o %"<Return>
autocmd Filetype rmd map <leader>r :w<Return>:execute "!R -e \"rmarkdown::render('%','pdf_document')\""<Return><Return>
autocmd Filetype rmd map <leader>b :w<Return>:execute "!R -e \"rmarkdown::render('%')\""<Return><Return>
autocmd Filetype r map <leader>r :w<Return>:execute "!R -e \"library(knitr); knitr::stitch('%')\""<Return><Return>
autocmd Filetype r map <leader>b :w<Return>:execute "!R -e \"library(knitr); knitr::stitch('%')\""<Return><Return>

"Building
function! ShowErrors()
  :cclose
  if len(getqflist()) > 0
    :copen
  endif
endfunction

"Fullscreen
function! Zoom()
    if (tabpagenr() == 1)
        :tab split
    else
        :tabc
    endif
endfunction
nmap <C-w>z :call Zoom()<return>

"QuickSearch
function! QuickSearchFunc(args)
    return 'grep -rn ' . a:args . ' .'
endfunction
function! QuickSearch(args)
    cexpr system(QuickSearchFunc(a:args)) | copen
endfunction
command! -nargs=1 QuickSearch call QuickSearch("<args>")
nmap ;; :tab new<return>:QuickSearch 
nmap <leader>; :QuickSearch 

"Highlight Long Lines
let g:highlight_long_lines=1
function! HighlightTooLongLines()
  highlight def link RightMargin Error
  if &textwidth != 0
    if g:highlight_long_lines != 0
      call matchadd('ErrorMsg', '\%>' . &l:textwidth . 'v.\+', -1)
    endif
  endif
endfunction
augroup highlight_toolong3
  au!
  au FileType,BufEnter * call HighlightTooLongLines()
augroup END


"Load Local Settings
let localconf=$LOCALDOT . '/conf'
for fpath in split(globpath(localconf, '*.vim'), '\n')
  if fpath != pluginrc
    exe 'source' fpath
  endif
endfor

